# Todo API Usage Guide

Base URL:  
`https://todo-backend-liyx.onrender.com/api/todo_entries`

---

## 1. Create a Todo Item

**POST** `/api/todo_entries`  
Creates a new todo item.

**Request Example:**
```http
POST /api/todo_entries
Content-Type: application/json

{
  "name": "Chocolate Droppa's New Mixtape , buy it"
}
```

**Response Example:**
```json
{
  "id": "68429f9ed9d401b2ad95dee0",
  "name": "Chocolate Droppa's New Mixtape , buy it",
  "time": "2025-06-06T07:58:22.798964"
}
```

---

## 2. Get All Todo Items

**GET** `/api/todo_entries`  
Retrieves all todo items.

**Response Example:**
```json
[
  {
    "id": "68416b64898268767422ee25",
    "name": "Buy and Cook groceries for kids  and wife "
  },
  {
    "id": "68428816cf37aa4b0ae7916f",
    "name": "Laptop"
  },
  {
    "id": "68428847cf37aa4b0ae79170",
    "name": "Buy New Laptop for Sade"
  }
]
```

---

## 3. Update a Todo Item

**PUT** `/api/todo_entries/<item_id>`  
Updates the name of a todo item.

**Request Example:**
```http
PUT /api/todo_entries/68429f9ed9d401b2ad95dee0
Content-Type: application/json

{
  "name": "Chocolate Droppa's New Mixtape is Dropping tomorrow."
}
```

**Response Example:**
```json
{
  "id": "68429f9ed9d401b2ad95dee0",
  "name": "Chocolate Droppa's New Mixtape is Dropping tomorrow."
}
```

---

## 4. Delete a Todo Item

**DELETE** `/api/todo_entries/<item_id>`  
Deletes a todo item.

**Request Example:**
```http
DELETE /api/todo_entries/68429f9ed9d401b2ad95dee0
```

**Response Example:**
```json
{
  "message": "Item delete is successful"
}
```

---

## Notes

- Replace `<item_id>` with the actual `id` of the todo item.
- All requests and responses use JSON format.